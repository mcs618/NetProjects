def csv_reader(csvfile):
    """Read CSV file, return a list of devices."""
    device_list = []
    with open(csvfile, "r") as datafile:
        datareader = csv.DictReader(datafile)
        for row in datareader:
            if datareader.line_num == 1:
                continue
            ip_addr = row['IP_address']
            username = row['Username']
            password = row['Password']
            device_dict = {'ip_addr': ip_addr, 'username': username, 'password': password}
            # add device to device_list
            device_list.append(device_dict)

    return device_list

def login(ip_addr, username, password):
    """Establish SSH connection, return SSH conn object."""
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(ip_addr, username=username, password=password, look_for_keys=False, allow_agent=False)
    ssh_channel = ssh.invoke_shell()
    # Need to return both ssh and ssh_channel
    return (ssh, ssh_channel)

def errordetect(ssh_channel):
    ssh_channel.send("terminal length 0" + "\n")
    ssh_channel.send("show version | inc System serial|uptime|image|Model number|\*" + "\n")

    # Whatever else you want to do in error detect

def main():
    # Get all devices from csv_file
    csvfile = "d:\mark\python\Projects\error_detect\SwitchData.csv"
    device_list = csv_reader(csvfile)

    # Establish SSH connections
    ssh_conns = []
    ssh_save = []
    for a_device in device_list:
        ssh_pre, ssh_conn = login(**a_device)
        # Save the SSH connection to a list
        ssh_conns.append(ssh_conn)
        # Save the SSH preliminary connection to a separate list (just to avoid a problem)
        # that otherwise happens
        ssh_save.append(ssh_pre)

    # Run errordetect
    x = 0
    starttime = time.time()

    while x < 5:
        for a_connection in ssh_conns:
            errordetect(a_connection)

        time.sleep(30.0 - ((time.time() - starttime) % 30.0))
        x += 1

if __name__ == "__main__":
    main()
    

"""    
Note, I didn't actually run this code...so there might be errors, 
but hopefully it helps give you a framework.

At a high-level I do the following.

1) Read all the devices from the CSV file, save to a list (a list of dictionaries)
2) Establish all of the SSH connections and save those to a list
3) Run the error detection code (basically loops over all of the SSH connections 
and executes the error detection). You could determine which device is which by 
accessing the ssh_channel IP address (or by dynamically getting the router's name 
and displaying it).
"""